;**************************************************************************
; FFTR2BF.HLP:
; Help file for FFTR2BF.ASM (for 56300)
; (Fast Fourier Transform with Block Floating Point)
;
; Updated 11/18/98 - Tested in simulator environment
;**************************************************************************

 This program calculates the Radix-2, Decimation-in-Time Fast Fourier Transform 
 using Block Floating Point. 

 This algorithm operates as follows:
 1. The algorithm steps through Radix-2, Decimation-in-Time butterflies as
    the FFTR2AA routine. Within the butterflies, the limit bit (L) is checked.
 2. If L is set (limiting has occurred), the routine switches to a 
    subroutine.
 3. The subroutine recalculates the butterfly outputs for the
    complete pass, and scales down the butterfly outputs. A
    "block exponent" keeps track of the number of times the
    results have been scaled.

 The algorithm results in a much larger dynamic range and better 
 precision for the FFT results. Because of the extra instructions within
 the butterflies, and the subroutine handling conditional scaling, it
 executes slower than other FFT routines. 

 The calling sequence is FFTR2BF points,data,twiddle,temp where:
 - points is the number of points in the FFT
 - data is the starting location of the input data
 - twiddle is the starting location of the twiddle factor table
 - starting location of scratch memory (four consecutive locations). On output,
   x:(temp)+2 contains the common exponent (number of bits scaled).
   x:(temp)+3 shows (in base 4) the number of bits scaled per stage
